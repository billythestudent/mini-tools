// JPG to PNG D√∂n√º≈üt√ºr√ºc√º
function initializeJpgToPng() {
    const form = document.getElementById('jpgToPngForm');
    const fileInput = document.getElementById('jpgFile');
    const resultDiv = document.getElementById('jpgToPngResult');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!fileInput.files.length) {
            showError(resultDiv, 'L√ºtfen bir JPG dosyasƒ± se√ßin.');
            return;
        }

        const file = fileInput.files[0];
        
        // Dosya tipi kontrol√º
        if (!file.type.match('image/jpeg')) {
            showError(resultDiv, 'L√ºtfen sadece JPG dosyasƒ± se√ßin.');
            return;
        }

        // Dosya boyutu kontrol√º (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
            showError(resultDiv, 'Dosya boyutu 10MB\'dan k√º√ß√ºk olmalƒ±dƒ±r.');
            return;
        }

        convertJpgToPng(file, resultDiv);
    });
}

// PNG to JPG D√∂n√º≈üt√ºr√ºc√º
function initializePngToJpg() {
    const form = document.getElementById('pngToJpgForm');
    const fileInput = document.getElementById('pngFile');
    const resultDiv = document.getElementById('pngToJpgResult');

    form.addEventListener('submit', function(e) {
        e.preventDefault();
        
        if (!fileInput.files.length) {
            showError(resultDiv, 'L√ºtfen bir PNG dosyasƒ± se√ßin.');
            return;
        }

        const file = fileInput.files[0];
        
        // Dosya tipi kontrol√º
        if (!file.type.match('image/png')) {
            showError(resultDiv, 'L√ºtfen sadece PNG dosyasƒ± se√ßin.');
            return;
        }

        // Dosya boyutu kontrol√º (max 10MB)
        if (file.size > 10 * 1024 * 1024) {
            showError(resultDiv, 'Dosya boyutu 10MB\'dan k√º√ß√ºk olmalƒ±dƒ±r.');
            return;
        }

        convertPngToJpg(file, resultDiv);
    });
}

// JPG to PNG d√∂n√º≈üt√ºrme fonksiyonu
function convertJpgToPng(file, resultDiv) {
    showLoading(resultDiv, 'JPG dosyasƒ± PNG formatƒ±na d√∂n√º≈üt√ºr√ºl√ºyor...');

    const reader = new FileReader();
    
    reader.onload = function(e) {
        const img = new Image();
        
        img.onload = function() {
            // Canvas olu≈ütur
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            
            const ctx = canvas.getContext('2d');
            
            // Beyaz arkaplan (JPG'de alpha kanalƒ± olmadƒ±ƒüƒ± i√ßin)
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Resmi √ßiz
            ctx.drawImage(img, 0, 0);
            
            // PNG formatƒ±nda d√∂n√º≈üt√ºr
            canvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                const fileName = file.name.replace(/\.(jpg|jpeg)$/i, '.png');
                
                showSuccess(resultDiv, url, fileName, 'PNG');
            }, 'image/png');
        };
        
        img.onerror = function() {
            showError(resultDiv, 'Resim y√ºklenirken hata olu≈ütu.');
        };
        
        img.src = e.target.result;
    };
    
    reader.onerror = function() {
        showError(resultDiv, 'Dosya okunurken hata olu≈ütu.');
    };
    
    reader.readAsDataURL(file);
}

// PNG to JPG d√∂n√º≈üt√ºrme fonksiyonu
function convertPngToJpg(file, resultDiv) {
    showLoading(resultDiv, 'PNG dosyasƒ± JPG formatƒ±na d√∂n√º≈üt√ºr√ºl√ºyor...');

    const reader = new FileReader();
    
    reader.onload = function(e) {
        const img = new Image();
        
        img.onload = function() {
            // Canvas olu≈ütur
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            
            const ctx = canvas.getContext('2d');
            
            // Beyaz arkaplan
            ctx.fillStyle = '#ffffff';
            ctx.fillRect(0, 0, canvas.width, canvas.height);
            
            // Resmi √ßiz
            ctx.drawImage(img, 0, 0);
            
            // JPG formatƒ±nda d√∂n√º≈üt√ºr (kalite: 0.92)
            canvas.toBlob(function(blob) {
                const url = URL.createObjectURL(blob);
                const fileName = file.name.replace(/\.png$/i, '.jpg');
                
                showSuccess(resultDiv, url, fileName, 'JPG');
            }, 'image/jpeg', 0.92);
        };
        
        img.onerror = function() {
            showError(resultDiv, 'Resim y√ºklenirken hata olu≈ütu.');
        };
        
        img.src = e.target.result;
    };
    
    reader.onerror = function() {
        showError(resultDiv, 'Dosya okunurken hata olu≈ütu.');
    };
    
    reader.readAsDataURL(file);
}

// Y√ºkleme mesajƒ± g√∂ster
function showLoading(resultDiv, message) {
    resultDiv.innerHTML = `
        <div class="loading-state">
            <div class="spinner"></div>
            <p>${message}</p>
        </div>
    `;
}

// Ba≈üarƒ±lƒ± d√∂n√º≈üt√ºrme sonucu
function showSuccess(resultDiv, downloadUrl, fileName, format) {
    resultDiv.innerHTML = `
        <div class="success-state">
            <div class="success-icon">‚úì</div>
            <h3>D√∂n√º≈üt√ºrme Ba≈üarƒ±lƒ±!</h3>
            <p>Dosyanƒ±z ${format} formatƒ±na d√∂n√º≈üt√ºr√ºld√º.</p>
            <div class="download-section">
                <a href="${downloadUrl}" download="${fileName}" class="btn download-btn">
                    üì• ${fileName} ƒ∞ndir
                </a>
                <button onclick="location.reload()" class="btn btn-secondary">
                    üîÑ Yeni Dosya D√∂n√º≈üt√ºr
                </button>
            </div>
            <div class="file-info">
                <small>Dosyayƒ± indirdikten sonra tarayƒ±cƒ± hafƒ±zasƒ± temizlenecektir.</small>
            </div>
        </div>
    `;
    
    // Temizlik: 30 dakika sonra URL'yi serbest bƒ±rak
    setTimeout(() => {
        URL.revokeObjectURL(downloadUrl);
    }, 30 * 60 * 1000);
}

// Hata mesajƒ± g√∂ster
function showError(resultDiv, message) {
    resultDiv.innerHTML = `
        <div class="error-state">
            <div class="error-icon">‚ö†Ô∏è</div>
            <h3>Hata Olu≈ütu</h3>
            <p>${message}</p>
            <button onclick="this.parentElement.remove()" class="btn btn-secondary">
                Tekrar Dene
            </button>
        </div>
    `;
}